"use strict";(self.webpackChunktop_todolist=self.webpackChunktop_todolist||[]).push([[57],{912:(n,e,t)=>{t.d(e,{A:()=>A});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([n.id,"/* TOP TODO List */\n/* TODO styling */\n\n/*why this doesn't this work. when applying the style to each individual element does?... <.task-name-label,.notes-label, .priority-label,.due-date-label { display: flex;align-items: center;}> */\n\n/* style2.css */\n:root {\n    --clr-primary: rgb(211, 149, 240);\n    --clr-light: #f4f4f4;\n    --clr-dark: #333;\n    --clr-warning: rgb(140, 11, 247);\n}\n\n*,\n*::before,\n*::after {\n    font-family: inherit;\n    box-sizing: border-box;\n}\n\nbody {\n    margin: 0;\n    font-family: 'Work Sans', sans-serif;\n    font-weight: 300;\n    font-size: 1.5rem;\n    background-color: var(--clr-primary);\n    color: var(--clr-light);\n    display: grid;\n    grid:\n        'header header header header'auto \"...... lists active ......\"auto / 1fr minmax(100px, 300px) minmax(250px, 500px) 1fr;\n}\n\n.title {\n    grid-area: header;\n    text-align: center;\n    font-size: calc(3vw + 2rem);\n    font-weight: 900;\n    color: rgba(0, 0, 0, 0.2);\n    margin: -0.1em 0 0.5em\n}\n\n.all-lists {\n    grid-area: lists;\n}\n\n.master-list {\n    font-size: 1.2rem;\n    line-height: 1.7;\n    list-style: circle;\n    padding-left: 1.1em;\n}\n\n.list-name {\n    cursor: pointer;\n\n}\n\nli {\n    list-style: none;\n    position: relative;\n}\n\nli::before {\n    /* style of visible bullet point*/\n    content: '\\2022';\n    display: inline-block;\n}\n\nli:hover::before {\n    transform: scale(1.3);\n}\n\n.list-name:hover {\n    opacity: 0.7;\n}\n\nform {\n    display: flex;\n}\n\n/* default set of parameters for most buttons */\n.btn {\n    cursor: pointer;\n    background: 0;\n    border: 0;\n    padding: 0;\n    color: inherit;\n}\n\n.btn.create {\n    font-size: 1.5rem;\n    grid-area: active;\n    font-weight: 900;\n    margin-right: 0.25em;\n    transition: opacity 250ms ease-in;\n}\n\n#btn-create-task {\n    color: var(--clr-primary);\n}\n\n.task-body form {\n    display: flex;\n    justify-content: space-between;\n}\n\n.task-btn {\n    align-items: center;\n    order: 3;\n    grid-area: active;\n    margin: .25em .25em .25em .25em;\n}\n\n.btn:hover {\n    opacity: 0.4;\n}\n\n.btn.delete {\n    font-weight: 700;\n    letter-spacing: 1px;\n    font-size: 1rem;\n}\n\n.btn.delete:hover {\n    color: var(--clr-warning);\n}\n\n.new {\n    grid-area: active;\n    background: transparent;\n    border: 0;\n    color: inherit;\n    border-bottom: 1px solid currentColor;\n    font-size: 1rem;\n    transition: border-bottom 150ms ease-in;\n    outline: none;\n    padding: .25em;\n    order: 2;\n    /* applying flex to <form> allows order: 2 to display button first but maintain second position when using tab.  Why does this not impact the add task button? */\n}\n\n.new.task::placeholder {\n    opacity: 0.5;\n}\n\n.new:focus {\n    border-bottom-width: 3px;\n}\n\n.new:focus::placeholder {\n    opacity: 0.6;\n}\n\n.new.task {\n    width: 50%;\n    margin-bottom: 0;\n}\n\n.active-list {\n    font-weight: bold;\n    font-size: 1.3rem;\n}\n\n.task-list {\n    --spacer: 1.5rem;\n    grid-area: active;\n    background: var(--clr-light);\n    color: var(--clr-dark);\n    align-self: start;\n    /* prevents My Lists from controlling size of Task List */\n}\n\n.task-header {\n    padding: var(--spacer);\n    background: #e4e4e4;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.list-title {\n    margin: 0 1em 0;\n    /* maintain spacing if long list name */\n}\n\n.task-count {\n    margin: 0;\n    font-size: 1rem;\n}\n\n.task-body {\n    padding: var(--spacer);\n    position: relative;\n}\n\n.task-temp {\n    display: flex;\n}\n\n.task-name-label {\n    position: relative;\n    align-items: center;\n    cursor: pointer;\n    margin-bottom: .15em;\n    margin-right: auto;\n    display: flex;\n    overflow: hidden;\n    white-space: nowrap;\n    /* text-overflow: ellipsis; MUST be adjusted in JS for effect*/\n    /* max-width: calc(100% - 300px);*/\n    flex: 0 0 33%;\n    /* resolves max-width not having a min size with window resize */\n}\n\n.task-note-label {\n    flex: 0 0 35%;\n    color: purple;\n    font-size: .6em;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.task-name-label:hover, .task-note-label:hover {\n    overflow: visible;\n    white-space: normal;\n    text-overflow: clip;\n    max-width: none;\n}\n\n.task-priority-label {\n    flex: 0 0 10%;\n    color: green;\n    font-size: .6em;\n}\n\n.task-due-date-label {\n    flex: 0 0 20%;\n    color: brown;\n    font-size: .6em;\n}\n\n[type='checkbox'] {\n    opacity: 0;\n    position: absolute;\n}\n\n/* visible checkbox radio button */\n.custom-checkbox {\n    --size: 0.75em;\n    display: inline-block;\n    width: var(--size);\n    height: var(--size);\n    margin-right: var(--size);\n    cursor: pointer;\n    border: 2px solid currentColor;\n    border-radius: 50%;\n    transform: scale(1);\n    transition: transform 200ms ease-in-out;\n    flex-shrink: 0;\n    /* prevents shrinking with long task name */\n}\n\n/* .task-name-label:hover .custom-checkbox { */\n/* changing from the above allows whole line to hover*/\n.task-temp:hover .custom-checkbox {\n    transform: scale(1.2);\n    color: var(--clr-primary);\n}\n\n[type=\"checkbox\"]:checked+.task-name-label .custom-checkbox {\n    background: var(--clr-primary);\n    border-color: var(--clr-primary);\n    box-shadow: inset 0 0 0px 3px white;\n}\n\n[type='checkbox']:checked+.task-name-label {\n    opacity: 0.5;\n}\n\n/* manages 'task complete' strike through*/\n.task-name-label::after {\n    content: '';\n    position: absolute;\n    left: 1.5em;\n    right: 0;\n    height: 3px;\n    background: currentColor;\n    transform: scaleX(0);\n    transform-origin: center;\n    transition: transform 200ms ease-in-out;\n}\n\n[type='checkbox']:checked+.task-name-label::after {\n    transform: scaleX(1);\n    transform-origin: initial;\n}\n\n.delete-buttons {\n    display: flex;\n    justify-content: space-evenly;\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: -30px;\n    color: var(--clr-light);\n}","",{version:3,sources:["webpack://./src/style2.css"],names:[],mappings:"AAAA,kBAAkB;AAClB,iBAAiB;;AAEjB,kMAAkM;;AAElM,eAAe;AACf;IACI,iCAAiC;IACjC,oBAAoB;IACpB,gBAAgB;IAChB,gCAAgC;AACpC;;AAEA;;;IAGI,oBAAoB;IACpB,sBAAsB;AAC1B;;AAEA;IACI,SAAS;IACT,oCAAoC;IACpC,gBAAgB;IAChB,iBAAiB;IACjB,oCAAoC;IACpC,uBAAuB;IACvB,aAAa;IACb;8HAC0H;AAC9H;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,2BAA2B;IAC3B,gBAAgB;IAChB,yBAAyB;IACzB;AACJ;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,eAAe;;AAEnB;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,iCAAiC;IACjC,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA,+CAA+C;AAC/C;IACI,eAAe;IACf,aAAa;IACb,SAAS;IACT,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,oBAAoB;IACpB,iCAAiC;AACrC;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,mBAAmB;IACnB,QAAQ;IACR,iBAAiB;IACjB,+BAA+B;AACnC;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,SAAS;IACT,cAAc;IACd,qCAAqC;IACrC,eAAe;IACf,uCAAuC;IACvC,aAAa;IACb,cAAc;IACd,QAAQ;IACR,gKAAgK;AACpK;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,4BAA4B;IAC5B,sBAAsB;IACtB,iBAAiB;IACjB,yDAAyD;AAC7D;;AAEA;IACI,sBAAsB;IACtB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,8BAA8B;AAClC;;AAEA;IACI,eAAe;IACf,uCAAuC;AAC3C;;AAEA;IACI,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,oBAAoB;IACpB,kBAAkB;IAClB,aAAa;IACb,gBAAgB;IAChB,mBAAmB;IACnB,8DAA8D;IAC9D,kCAAkC;IAClC,aAAa;IACb,gEAAgE;AACpE;;AAEA;IACI,aAAa;IACb,aAAa;IACb,eAAe;IACf,gBAAgB;IAChB,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;IACnB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,kBAAkB;AACtB;;AAEA,kCAAkC;AAClC;IACI,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,mBAAmB;IACnB,yBAAyB;IACzB,eAAe;IACf,8BAA8B;IAC9B,kBAAkB;IAClB,mBAAmB;IACnB,uCAAuC;IACvC,cAAc;IACd,2CAA2C;AAC/C;;AAEA,8CAA8C;AAC9C,sDAAsD;AACtD;IACI,qBAAqB;IACrB,yBAAyB;AAC7B;;AAEA;IACI,8BAA8B;IAC9B,gCAAgC;IAChC,mCAAmC;AACvC;;AAEA;IACI,YAAY;AAChB;;AAEA,0CAA0C;AAC1C;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,QAAQ;IACR,WAAW;IACX,wBAAwB;IACxB,oBAAoB;IACpB,wBAAwB;IACxB,uCAAuC;AAC3C;;AAEA;IACI,oBAAoB;IACpB,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,kBAAkB;IAClB,WAAW;IACX,OAAO;IACP,aAAa;IACb,uBAAuB;AAC3B",sourcesContent:["/* TOP TODO List */\n/* TODO styling */\n\n/*why this doesn't this work. when applying the style to each individual element does?... <.task-name-label,.notes-label, .priority-label,.due-date-label { display: flex;align-items: center;}> */\n\n/* style2.css */\n:root {\n    --clr-primary: rgb(211, 149, 240);\n    --clr-light: #f4f4f4;\n    --clr-dark: #333;\n    --clr-warning: rgb(140, 11, 247);\n}\n\n*,\n*::before,\n*::after {\n    font-family: inherit;\n    box-sizing: border-box;\n}\n\nbody {\n    margin: 0;\n    font-family: 'Work Sans', sans-serif;\n    font-weight: 300;\n    font-size: 1.5rem;\n    background-color: var(--clr-primary);\n    color: var(--clr-light);\n    display: grid;\n    grid:\n        'header header header header'auto \"...... lists active ......\"auto / 1fr minmax(100px, 300px) minmax(250px, 500px) 1fr;\n}\n\n.title {\n    grid-area: header;\n    text-align: center;\n    font-size: calc(3vw + 2rem);\n    font-weight: 900;\n    color: rgba(0, 0, 0, 0.2);\n    margin: -0.1em 0 0.5em\n}\n\n.all-lists {\n    grid-area: lists;\n}\n\n.master-list {\n    font-size: 1.2rem;\n    line-height: 1.7;\n    list-style: circle;\n    padding-left: 1.1em;\n}\n\n.list-name {\n    cursor: pointer;\n\n}\n\nli {\n    list-style: none;\n    position: relative;\n}\n\nli::before {\n    /* style of visible bullet point*/\n    content: '\\2022';\n    display: inline-block;\n}\n\nli:hover::before {\n    transform: scale(1.3);\n}\n\n.list-name:hover {\n    opacity: 0.7;\n}\n\nform {\n    display: flex;\n}\n\n/* default set of parameters for most buttons */\n.btn {\n    cursor: pointer;\n    background: 0;\n    border: 0;\n    padding: 0;\n    color: inherit;\n}\n\n.btn.create {\n    font-size: 1.5rem;\n    grid-area: active;\n    font-weight: 900;\n    margin-right: 0.25em;\n    transition: opacity 250ms ease-in;\n}\n\n#btn-create-task {\n    color: var(--clr-primary);\n}\n\n.task-body form {\n    display: flex;\n    justify-content: space-between;\n}\n\n.task-btn {\n    align-items: center;\n    order: 3;\n    grid-area: active;\n    margin: .25em .25em .25em .25em;\n}\n\n.btn:hover {\n    opacity: 0.4;\n}\n\n.btn.delete {\n    font-weight: 700;\n    letter-spacing: 1px;\n    font-size: 1rem;\n}\n\n.btn.delete:hover {\n    color: var(--clr-warning);\n}\n\n.new {\n    grid-area: active;\n    background: transparent;\n    border: 0;\n    color: inherit;\n    border-bottom: 1px solid currentColor;\n    font-size: 1rem;\n    transition: border-bottom 150ms ease-in;\n    outline: none;\n    padding: .25em;\n    order: 2;\n    /* applying flex to <form> allows order: 2 to display button first but maintain second position when using tab.  Why does this not impact the add task button? */\n}\n\n.new.task::placeholder {\n    opacity: 0.5;\n}\n\n.new:focus {\n    border-bottom-width: 3px;\n}\n\n.new:focus::placeholder {\n    opacity: 0.6;\n}\n\n.new.task {\n    width: 50%;\n    margin-bottom: 0;\n}\n\n.active-list {\n    font-weight: bold;\n    font-size: 1.3rem;\n}\n\n.task-list {\n    --spacer: 1.5rem;\n    grid-area: active;\n    background: var(--clr-light);\n    color: var(--clr-dark);\n    align-self: start;\n    /* prevents My Lists from controlling size of Task List */\n}\n\n.task-header {\n    padding: var(--spacer);\n    background: #e4e4e4;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.list-title {\n    margin: 0 1em 0;\n    /* maintain spacing if long list name */\n}\n\n.task-count {\n    margin: 0;\n    font-size: 1rem;\n}\n\n.task-body {\n    padding: var(--spacer);\n    position: relative;\n}\n\n.task-temp {\n    display: flex;\n}\n\n.task-name-label {\n    position: relative;\n    align-items: center;\n    cursor: pointer;\n    margin-bottom: .15em;\n    margin-right: auto;\n    display: flex;\n    overflow: hidden;\n    white-space: nowrap;\n    /* text-overflow: ellipsis; MUST be adjusted in JS for effect*/\n    /* max-width: calc(100% - 300px);*/\n    flex: 0 0 33%;\n    /* resolves max-width not having a min size with window resize */\n}\n\n.task-note-label {\n    flex: 0 0 35%;\n    color: purple;\n    font-size: .6em;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.task-name-label:hover, .task-note-label:hover {\n    overflow: visible;\n    white-space: normal;\n    text-overflow: clip;\n    max-width: none;\n}\n\n.task-priority-label {\n    flex: 0 0 10%;\n    color: green;\n    font-size: .6em;\n}\n\n.task-due-date-label {\n    flex: 0 0 20%;\n    color: brown;\n    font-size: .6em;\n}\n\n[type='checkbox'] {\n    opacity: 0;\n    position: absolute;\n}\n\n/* visible checkbox radio button */\n.custom-checkbox {\n    --size: 0.75em;\n    display: inline-block;\n    width: var(--size);\n    height: var(--size);\n    margin-right: var(--size);\n    cursor: pointer;\n    border: 2px solid currentColor;\n    border-radius: 50%;\n    transform: scale(1);\n    transition: transform 200ms ease-in-out;\n    flex-shrink: 0;\n    /* prevents shrinking with long task name */\n}\n\n/* .task-name-label:hover .custom-checkbox { */\n/* changing from the above allows whole line to hover*/\n.task-temp:hover .custom-checkbox {\n    transform: scale(1.2);\n    color: var(--clr-primary);\n}\n\n[type=\"checkbox\"]:checked+.task-name-label .custom-checkbox {\n    background: var(--clr-primary);\n    border-color: var(--clr-primary);\n    box-shadow: inset 0 0 0px 3px white;\n}\n\n[type='checkbox']:checked+.task-name-label {\n    opacity: 0.5;\n}\n\n/* manages 'task complete' strike through*/\n.task-name-label::after {\n    content: '';\n    position: absolute;\n    left: 1.5em;\n    right: 0;\n    height: 3px;\n    background: currentColor;\n    transform: scaleX(0);\n    transform-origin: center;\n    transition: transform 200ms ease-in-out;\n}\n\n[type='checkbox']:checked+.task-name-label::after {\n    transform: scaleX(1);\n    transform-origin: initial;\n}\n\n.delete-buttons {\n    display: flex;\n    justify-content: space-evenly;\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: -30px;\n    color: var(--clr-light);\n}"],sourceRoot:""}]);const A=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var A=0;A<this.length;A++){var l=this[A][0];null!=l&&(i[l]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],A=0;A<n.length;A++){var l=n[A],s=o.base?l[0]+o.base:l[0],c=a[s]||0,d="".concat(s," ").concat(c);a[s]=c+1;var u=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=r(p,o);o.byIndex=A,e.splice(A,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=t(a[i]);e[A].references--}for(var l=o(n,r),s=0;s<a.length;s++){var c=t(a[s]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=l}}},659:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},377:(n,e,t)=>{const o=document.querySelector("[data-lists]"),r=document.querySelector("[data-new-list-form]"),a=document.querySelector("[data-new-list-input]"),i=document.querySelector("[data-task-display-container]"),A=document.querySelector("[data-list-title]"),l=document.querySelector("[data-task-count]"),s=document.querySelector("[data-tasks]"),c=document.getElementById("task-template"),d=document.querySelector("[data-new-task-button]"),u=document.querySelector("[data-new-task-input]"),p=document.querySelector("[data-task-notes-button]"),m=document.querySelector("[data-task-note-input]"),f=document.querySelector("[data-task-priority-button]"),C=document.querySelector(".task-priority-options"),B=document.querySelector("[data-task-due-date-button]"),g=document.querySelector("[data-task-due-date-input]"),h=document.querySelector("[data-delete-list-button]"),b=document.querySelector("[data-clear-complete-tasks-button]"),I="task.lists",y="task.selectedListId";let v=JSON.parse(localStorage.getItem(I))||[],k={value:localStorage.getItem(y)};function w(n){"block"===n.style.display?n.style.display="none":(n.style.display="block",n.focus())}function x(){E(),S()}function E(){console.log("F save lists pre:",v),localStorage.setItem(I,JSON.stringify(v)),console.log("F save lists:",v),console.log("F save sli null:",k),localStorage.setItem(y,k),console.log("F save sli null post:",k)}function S(){z(o),v.forEach((n=>{const e=document.createElement("li");e.dataset.listId=n.id,e.classList.add("list-name"),e.innerText=n.name,console.log("F rl sli:",k),n.id===k.value&&e.classList.add("active-list"),o.appendChild(e)}));const n=v.find((n=>n.id===k.value));null==k.value?i.style.display="none":(console.log("F render sl:",n),i.style.display="block",A.innerText=n.name,L(n),z(s),function(n){n.tasks.forEach((n=>{const e=document.importNode(c.content,!0),t=e.querySelector("input");t.id=n.id,t.checked=n.complete;const o=e.querySelector(".task-name-label"),r=e.querySelector(".task-note-label"),a=e.querySelector(".task-priority-label"),i=e.querySelector(".task-due-date-label");o.htmlFor=n.id,r.htmlFor=n.id,a.htmlFor=n.id,i.htmlFor=n.id,o.append(n.name),r.append(n.note),a.append(n.priority),i.append(n.dueDate),s.appendChild(e)}))}(n))}function z(n){for(;n.firstChild;)n.removeChild(n.firstChild)}function L(n){const e=n.tasks.filter((n=>!n.complete)).length,t=1===e?"task":"tasks";l.innerText=`${e} ${t} remaining`}let q=v;console.log("EL2 sli:",k),o.addEventListener("click",(function(n){"li"===n.target.tagName.toLowerCase()&&(k.value=n.target.dataset.listId,console.log("EL F hlc sli:",k),x())})),s.addEventListener("click",(function(n){if("input"===n.target.tagName.toLowerCase()){const e=q.find((n=>n.id===k.value));e.tasks.find((e=>e.id===n.target.id)).complete=n.target.checked,E(),L(e)}})),r.addEventListener("click",(function(n){n.preventDefault();const e=a.value;if(null==e||""==e)return;const t=(o=e,console.log("F createList:",o),{id:Date.now().toString(),name:o,tasks:[]});var o;a.value=null,q.push(t),console.log("EL newListFormNAME:",t),console.log("EL newListFormARRAY:",q),x()})),d.addEventListener("click",(function(n){n.preventDefault();const e=u.value;if(m.style.display="none",C.style.display="none",g.style.display="none",null==e||""==e)return;const t=m.value,o=C.querySelector('input[type="radio"]:checked')?.value||"",r=g.value;if(console.log("EL nTF date value:",r),!function(n){if(""===n)return!0;if(!/^(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01])\/\d{2}$/.test(n))return!1;const[e,t,o]=n.split("/").map(Number);if(e<1||e>12)return!1;const r=new Date(o,e,0).getDate();return!(t<1||t>r||o<0||o>99)}(r))return alert("Please enter valid mm/dd/yy"),void(g.value=null);const a=function(n,e,t,o){return{id:Date.now().toString(),name:n,note:e||"",priority:t||"",dueDate:o||"",complete:!1}}(e,t,o,r);u.value=null,m.value=null,g.value=null,C.querySelectorAll('input[type="radio"]').forEach((n=>{n.checked=!1})),q.find((n=>n.id===k.value)).tasks.push(a),x()})),p.addEventListener("click",(function(n){n.preventDefault(),w(m)})),f.addEventListener("click",(function(n){n.preventDefault(),w(C)})),B.addEventListener("click",(function(n){n.preventDefault(),w(g)})),b.addEventListener("click",(function(n){const e=q.find((n=>n.id===k.value));e.tasks=e.tasks.filter((n=>!n.complete)),x()})),h.addEventListener("click",(function(n){console.log("EL dlb pre:",q),q.splice(q.findIndex((n=>n.id===k.value)),1),console.log("EL dlb:",q),console.log("EL dlb sli:",k),k.value=null,console.log("EL dlb sli null:",k),console.log("EL dlb null:",q),x()})),document.querySelector(".footer").appendChild(function(){const n=document.createElement("footer");return n.style.backgroundColor="#333",n.style.fontSize="1rem",n.style.color="#f8afe5",n.style.padding="3px",n.style.textAlign="center",n.style.position="fixed",n.style.width="100%",n.style.bottom="0",n.innerHTML="LoptrSir",n}());var j=t(72),T=t.n(j),D=t(825),F=t.n(D),M=t(659),O=t.n(M),Y=t(56),W=t.n(Y),N=t(540),U=t.n(N),R=t(113),X=t.n(R),J=t(912),P={};P.styleTagTransform=X(),P.setAttributes=W(),P.insert=O().bind(null,"head"),P.domAPI=F(),P.insertStyleElement=U(),T()(J.A,P),J.A&&J.A.locals&&J.A.locals,S(),console.log("WP entry index.js")}},n=>{n(n.s=377)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,